#!/bin/bash
#
#   Simple shell script to backup (archive) files/directories to
#   a local target while only keeping a set amount of generations.
#

## Must be resolvable by `date`
## prefix/suffix will be added later
BASE_NAME="%Y-%m-%d_%H:%M"

## will be set by the `argparse` 
_sources=""
_target=""
_prefix=""
_suffix=""
_keep=3
_ask=true

function usage() {
    local script=`basename "$0"`

    printf "usage: $script [options] [source [...]] [target]\n\n"
    printf "Options:\n"
    printf "  -p [prefix]       Prefix to add to the filename.\n"
    printf "  -s [suffix]       Suffix to add to the filename.\n"
    printf "  -g [generations]  Generations to keep.\n"
    printf "                    Set to 0 to keep infinite.\n"
    printf "                    Defaults to %s.\n" ${_keep}
    printf "  -y, --yes         Don't ask for confirmation.\n"
    printf "  -h, --help        Show this help text.\n"
    printf "\n"
    printf "Notes:\n"
    printf "  - Deletion of old backups will take the prefix and suffix into\n"
    printf "    account. This means neither of these should be dynamic as\n"
    printf "    otherwise older version will not be deleted.\n"
}

function argparse() {
    while [ $# -gt 0 ]; do
        case $1 in
            "-g")
                _keep=$2
                shift
                ;;
            "-p")
                _prefix="$2"
                shift
                ;;
            "-s")
                _suffix="$2"
                shift
                ;;
            "-y"|"--yes")
                _ask=false
                ;;
            "-h"|"--help")
                usage
                exit 0
                ;;
            **)
                ## get all but last
                _sources=("$@")
                unset '_sources[-1]'

                ## get last
                _target="${!#}"
                _target="${_target%/}"

                break
                shift
                ;;
        esac

        shift
    done

    ## make sure we have a target
    if [ ! -d "${_target}" ]; then
        mkdir -p "${_target}"

        if [ ! $? -eq 0 ]; then
            log "Couldn't create target. Exiting!"
            exit 1
        fi
    fi

    ## must be an int
    if [[ ! "$_keep" =~ ^[0-9]+$ ]]; then
        log "Generations should be an integeter but it isn't, Exiting!"
        exit 1
    fi
}

function log() {
    echo -e "$@" >&2
} 

## at least two args (source, target) are required
if [ "$#" -lt 2 ]; then
    usage
    exit 1
fi

## do some argparsing
argparse "$@"

## ask confirmation before starting backup
if $_ask; then
    read -p "Start backup [Y/n]? " -n 1 -r                                                        
    REPLY="${REPLY:-y}"
    printf "\n"

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 0
    fi
fi

## create backup
_target_file="${_target}/${_prefix}$(date +"${BASE_NAME}")${_suffix}.zip"
zip -r "${_target_file}" "${_sources[@]}"

## delete old
if [ ${_keep} -gt 0 ]; then
    ls -t "${_target}/${_prefix}"*"${_suffix}.zip" | awk "NR>${_keep}" | xargs -I {} rm -- {}
fi
